import { writeFile } from "fs";

import {
  createProgram,
  createParser,
  SchemaGenerator,
  createFormatter,
  Config,
} from "ts-json-schema-generator";

import {
  yfArrayTypeFormatter,
  yfNumberFormatter,
  yfReferenceFormatter,
} from "./schema/TypeFormatter/schema-custom.js";

//const OUTPUT_PATH = "schema.json";
const OUTPUT_PATH = process.stdout;

const config: Config = {
  path: "src/{modules/**/*.ts,lib/options.ts}",
  tsconfig: "tsconfig.json",
  type: "*",
};

const formatter = createFormatter(
  config,
  (chainTypeFormatter, circularReferenceTypeFormatter) => {
    chainTypeFormatter
      .addTypeFormatter(
        new yfReferenceFormatter(
          circularReferenceTypeFormatter,
          config.encodeRefs ?? true
        )
      )
      .addTypeFormatter(new yfNumberFormatter())
      .addTypeFormatter(
        new yfArrayTypeFormatter(circularReferenceTypeFormatter)
      );
  }
);

const program = createProgram(config);
const parser = createParser(program, config);
const generator = new SchemaGenerator(program, parser, formatter, config);
const _schema = generator.createSchema(config.type);

const schema = {
  $schema: _schema.$schema,
  $comment:
    "DO NOT EDIT THIS FILE.  It is generated automatically " +
    "from typescript interfaces in the project.  To update, run " +
    "`yarn schema`.",
  ..._schema,
};

const schemaString = JSON.stringify(schema, null, 2);

function throwErr(err?: Error | null): void {
  if (err) throw err;
}

if (OUTPUT_PATH === process.stdout) {
  process.stdout.write(schemaString, throwErr);
} else {
  writeFile(OUTPUT_PATH as string, schemaString, throwErr);
}
